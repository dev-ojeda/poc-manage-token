@startuml
' ======================================================
' 1. Diagrama de Casos de Uso (Login)
' ======================================================
actor Usuario #LightGray
rectangle "Sistema de Autenticaci&#242;n" {
    usecase "Ingresar credenciales\n(username + password)" as UC1 #LightBlue
    usecase "Recibir Access y Refresh Tokens" as UC2 #LightBlue
    usecase "Refrescar Token" as UC3 #LightBlue
    usecase "Acceder a Dashboard\n(con Access Token)" as UC4 #LightBlue
}

Usuario --> UC1
UC1 --> UC2
Usuario --> UC3
Usuario --> UC4
@enduml

@startuml
class User {
  +id: ObjectId
  +username: str
  +password_hash: str
  +rol: str
}

class UserSession {
  +id: ObjectId
  +user_id: ObjectId
  +token: str
  +created_at: datetime
  +last_activity: datetime
}

class AuthService {
  +generate_tokens()
  +verify_token()
  +upsert_new_token()
  +revoke_old_token()
}

class UserService {
  +authenticate_user()
  +get_user_by_username()
}

class SessionService {
  +register_session()
  +update_session()
}

class AuditService {
  +update_session_activity()
}

UserService --> User
SessionService --> UserSession
AuthService --> UserSession
@enduml

@startuml
skinparam componentStyle component
skinparam componentStyle package
skinparam shadowing true
skinparam component {
  BackgroundColor<<API>> LightSkyBlue
  BackgroundColor<<Services>> LightGoldenRodYellow
  BackgroundColor<<DAOs>> LightGreen
  BackgroundColor<<Models>> Wheat
  BackgroundColor<<DB>> LightGray
}
skinparam package {
  BackgroundColor<<API>> LightSkyBlue
  BackgroundColor<<Services>> LightGoldenRodYellow
  BackgroundColor<<DAOs>> LightGreen
  BackgroundColor<<Models>> Wheat
  BackgroundColor<<DB>> LightGray
}

package "Routes" <<API>> {
    component "Login Route\nPOST /auth/acceso" as LoginRoute
    component "Refresh Route\nPOST /auth/refresh" as RefreshRoute
    component "Dashboard Route\nGET /auth/dashboard" as DashboardRoute
}

package "Services" <<Services>> {
    component "UserService\n<<Service>>" as UserService
    component "AuthService\n<<Service>>" as AuthService
    component "SessionService\n<<Service>>" as SessionService
    component "AuditService\n<<Service>>" as AuditService
}

package "DAO" <<DAOs>> {
    component "UserDAO\n<<DAO>>" as UserDAO
    component "AuthDAO\n<<DAO>>" as AuthDAO
    component "AuditDAO\n<<DAO>>" as AuditDAO
    component "SessionDAO\n<<DAO>>" as SessionDAO
}

package "Models" <<Models>> {
    component "User\n<<Model>>" as User
    component "UserSession\n<<Model>>" as UserSession
}

database "MongoDB" as DB

User --> LoginRoute
User --> RefreshRoute
User --> DashboardRoute
UserSession --> User
LoginRoute --> UserService
LoginRoute ---> AuthService
LoginRoute --> SessionService
LoginRoute --> AuditService
UserService --> UserDAO
AuthService --> AuthDAO
SessionService --> SessionDAO
AuditService --> AuditDAO
AuditDAO -> DB
UserDAO --> DB
AuthDAO --> DB
SessionDAO --> DB

@enduml


@startuml
' ======================================================
' 3. Diagrama de Secuencias (Login)
' ======================================================
actor User
participant LoginRoute #Wheat
participant UserService #LightSkyBlue
participant UserDAO  #LightGoldenRodYellow
participant AuthService #LightGreen
participant AuthDAO #LightBlue
participant SessionService #D6F527
participant AuditService #9C434E
database MongoDB

User -> LoginRoute: POST /auth/acceso (username, password, device, user_agent)
LoginRoute -> UserService: validate_login_payload(data)
LoginRoute -> UserService: authenticate_user(username, password)
UserService -> UserDAO: find_by_username(username)
UserDAO -> MongoDB: query user
UserDAO --> UserService: return User
UserService --> LoginRoute: return user_model

LoginRoute -> UserService: handle_failed_login(user_model)
UserService -> UserDAO: update failed_attempts / blocked_until

LoginRoute -> AuthService: is_token_in_use(username)
AuthService -> AuthDAO: query refresh_token activo
AuthDAO -> MongoDB: find token
AuthDAO --> AuthService: token info
AuthService --> LoginRoute: token status

alt Token expirado o no existe
    AuthService -> AuthService: generate_tokens(payload)
    AuthService -> AuthDAO: upsert_new_token(refresh_token)
    AuthDAO -> MongoDB: insert/update token
end

LoginRoute -> SessionService: register_session(user_session)
SessionService -> MongoDB: insert session

LoginRoute -> AuditService: update_session_activity(user_id, ip, browser)
AuditService -> MongoDB: save audit

LoginRoute --> User: return JSON {access_token, refresh_token, rol, device_id}
@enduml
